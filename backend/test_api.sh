#!/bin/bash

# Script de test automatis√© pour l'API VIGILEOSAPP25
# Usage: ./test_api.sh

BASE_URL="http://localhost:12000"
API_URL="$BASE_URL/api"

echo "üöÄ VIGILEOSAPP25 - Test automatis√© du Backend API"
echo "=================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
check_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
        exit 1
    fi
}

# Test 1: Authentification
echo -e "\n${YELLOW}1. Test d'authentification${NC}"
AUTH_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
    -d '{"username": "admin", "password": "admin123"}' \
    $API_URL/auth/login/)

TOKEN=$(echo $AUTH_RESPONSE | jq -r '.access')
if [ "$TOKEN" != "null" ] && [ "$TOKEN" != "" ]; then
    check_result 0 "Authentification r√©ussie"
else
    check_result 1 "√âchec de l'authentification"
fi

# Test 2: Sites
echo -e "\n${YELLOW}2. Test des sites${NC}"
SITES_COUNT=$(curl -s -H "Authorization: Bearer $TOKEN" $API_URL/sites/ | jq '.count')
if [ "$SITES_COUNT" -gt 0 ]; then
    check_result 0 "Sites r√©cup√©r√©s ($SITES_COUNT sites)"
else
    check_result 1 "Aucun site trouv√©"
fi

# Test 3: Equipment
echo -e "\n${YELLOW}3. Test des √©quipements${NC}"
EQUIPMENT_COUNT=$(curl -s -H "Authorization: Bearer $TOKEN" $API_URL/equipment/ | jq '.count')
if [ "$EQUIPMENT_COUNT" -gt 0 ]; then
    check_result 0 "√âquipements r√©cup√©r√©s ($EQUIPMENT_COUNT √©quipements)"
else
    check_result 1 "Aucun √©quipement trouv√©"
fi

# Test 4: Alerts
echo -e "\n${YELLOW}4. Test des alertes${NC}"
ALERTS_COUNT=$(curl -s -H "Authorization: Bearer $TOKEN" $API_URL/alerts/ | jq '.count')
if [ "$ALERTS_COUNT" -ge 0 ]; then
    check_result 0 "Alertes r√©cup√©r√©es ($ALERTS_COUNT alertes)"
else
    check_result 1 "Erreur lors de la r√©cup√©ration des alertes"
fi

# Test 5: Metrics
echo -e "\n${YELLOW}5. Test des m√©triques${NC}"
METRICS_COUNT=$(curl -s -H "Authorization: Bearer $TOKEN" $API_URL/metrics/ | jq '.count')
if [ "$METRICS_COUNT" -gt 0 ]; then
    check_result 0 "M√©triques r√©cup√©r√©es ($METRICS_COUNT m√©triques)"
else
    check_result 1 "Aucune m√©trique trouv√©e"
fi

# Test 6: Alert Statistics
echo -e "\n${YELLOW}6. Test des statistiques d'alertes${NC}"
STATS_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" $API_URL/alerts/stats/)
TOTAL_ALERTS=$(echo $STATS_RESPONSE | jq '.total')
if [ "$TOTAL_ALERTS" -ge 0 ]; then
    check_result 0 "Statistiques d'alertes r√©cup√©r√©es (Total: $TOTAL_ALERTS)"
else
    check_result 1 "Erreur lors de la r√©cup√©ration des statistiques"
fi

# Test 7: Metrics Summary
echo -e "\n${YELLOW}7. Test du r√©sum√© des m√©triques${NC}"
SUMMARY_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" $API_URL/metrics/summary/)
SUMMARY_COUNT=$(echo $SUMMARY_RESPONSE | jq '. | length')
if [ "$SUMMARY_COUNT" -gt 0 ]; then
    check_result 0 "R√©sum√© des m√©triques r√©cup√©r√© ($SUMMARY_COUNT √©quipements)"
else
    check_result 1 "Erreur lors de la r√©cup√©ration du r√©sum√©"
fi

# Test 8: Search functionality
echo -e "\n${YELLOW}8. Test de la recherche${NC}"
SEARCH_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_URL/alerts/?search=CPU")
SEARCH_COUNT=$(echo $SEARCH_RESPONSE | jq '.count')
if [ "$SEARCH_COUNT" -ge 0 ]; then
    check_result 0 "Recherche fonctionnelle ($SEARCH_COUNT r√©sultats pour 'CPU')"
else
    check_result 1 "Erreur lors de la recherche"
fi

# Test 9: Filtering
echo -e "\n${YELLOW}9. Test du filtrage${NC}"
FILTER_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_URL/alerts/?type=warning")
FILTER_COUNT=$(echo $FILTER_RESPONSE | jq '.count')
if [ "$FILTER_COUNT" -ge 0 ]; then
    check_result 0 "Filtrage fonctionnel ($FILTER_COUNT alertes de type 'warning')"
else
    check_result 1 "Erreur lors du filtrage"
fi

# Test 10: API Documentation
echo -e "\n${YELLOW}10. Test de la documentation API${NC}"
DOC_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $API_URL/docs/)
if [ "$DOC_RESPONSE" -eq 200 ]; then
    check_result 0 "Documentation API accessible"
else
    check_result 1 "Documentation API inaccessible"
fi

echo -e "\n${GREEN}üéâ Tous les tests sont pass√©s avec succ√®s !${NC}"
echo -e "${GREEN}‚úÖ Backend API enti√®rement fonctionnel${NC}"
echo -e "\nüìä R√©sum√© des donn√©es:"
echo -e "   ‚Ä¢ Sites: $SITES_COUNT"
echo -e "   ‚Ä¢ √âquipements: $EQUIPMENT_COUNT"
echo -e "   ‚Ä¢ Alertes: $ALERTS_COUNT"
echo -e "   ‚Ä¢ M√©triques: $METRICS_COUNT"
echo -e "\nüîó Liens utiles:"
echo -e "   ‚Ä¢ API Documentation: $BASE_URL/api/docs/"
echo -e "   ‚Ä¢ Admin Interface: $BASE_URL/admin/"
echo -e "   ‚Ä¢ API Schema: $BASE_URL/api/schema/"

echo -e "\n${YELLOW}Backend pr√™t pour la production ! üöÄ${NC}"