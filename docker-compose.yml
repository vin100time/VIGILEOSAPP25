version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: vigileosapp-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vigileosapp}
      POSTGRES_USER: ${POSTGRES_USER:-vigileosapp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=fr_FR.UTF-8 --lc-ctype=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - vigileosapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vigileosapp_user} -d ${POSTGRES_DB:-vigileosapp}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: vigileosapp-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password_123}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - vigileosapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # InfluxDB pour les métriques temporelles
  influxdb:
    image: influxdb:2.7-alpine
    container_name: vigileosapp-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD:-secure_influx_password_123}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG:-vigileos}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET:-equipment_metrics}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN:-my-super-secret-auth-token}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    networks:
      - vigileosapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Django
  web:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: vigileosapp-web
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-vigileosapp_user}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-vigileosapp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password_123}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-vigileos.settings.production}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@vigileosapp.com}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD:-admin123}
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN:-my-super-secret-auth-token}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-vigileos}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-equipment_metrics}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "${WEB_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - vigileosapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/health/', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker Celery pour les tâches asynchrones
  celery:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: vigileosapp-celery
    command: celery -A vigileos worker -l info --concurrency=2
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-vigileosapp_user}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-vigileosapp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password_123}@redis:6379/0
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-vigileos.settings.production}
    volumes:
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - vigileosapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "vigileos", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scheduler Celery Beat
  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: vigileosapp-celery-beat
    command: celery -A vigileos beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-vigileosapp_user}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-vigileosapp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password_123}@redis:6379/0
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-vigileos.settings.production}
    volumes:
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - vigileosapp-network
    restart: unless-stopped

  # Reverse Proxy Nginx
  nginx:
    image: nginx:alpine
    container_name: vigileosapp-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/sites-available/default:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - logs_volume:/var/log/nginx
    depends_on:
      web:
        condition: service_healthy
    networks:
      - vigileosapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React (optionnel si servi par Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vigileosapp-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - vigileosapp-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  vigileosapp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
